<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Path\PathMatcherInterface;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_help().
 */
function antibot_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the antibot module.
    case 'help.page.antibot':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Prevent forms from being submitted without Javascript enabled') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 */
function antibot_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Track whether or not antibot is enabled for this form.
  $enabled = FALSE;

  // Load module config.
  $config = \Drupal::config('antibot.settings');

  // Get the configured active form IDs for antibot.
  if ($form_ids = $config->get('form_ids')) {
    // Check if this form is a match.
    if (\Drupal::service('path.matcher')->matchPath($form_id, implode("\n", $form_ids))) {
      // Add a pre-render function.
      $form['#pre_render'][] = 'antibot_form_pre_render';
      // Mark this form as enabled.
      $enabled = TRUE;
    }
  }

  // Determine if we should display the form ID.
  if ($config->get('show_form_ids')) {
    // Check if the user has permission to view these messages.
    if (\Drupal::currentUser()->hasPermission('access administration pages')) {
      // Set a message with the form ID and status.
      drupal_set_message("{$form_id}: " . ($enabled ? t('active') : t('inactive')));
    }
  }
}

/**
 * Pre-render callback for Antibot-enabled forms.
 *
 * @see antibot_form_alter().
 */
function antibot_form_pre_render(array $build) {
  // Add the Antibot library.
  $build['#attached']['library'][] = 'antibot/antibot.form';

  // Store the form ID that the JS can replace the action path.
  $build['#attached']['drupalSettings']['antibot']['actions'][$build['#id']] = $build['#id'];

  // Store the action placeholder as an attribute so that iy converts
  // during the building of the form. This is needed because in Drupal 8
  // the form action is a placeholder that is not added until the very
  // last moment, in order to keep the form cacheable.
  $build['#attributes']['data-action'] = $build['#action'];

  // Change the action so the submission does not go through
  $build['#action'] = base_path() . 'antibot';
    
  // Hide the form in the event that the user does not have Javascript.
  // If they do, it will be restored.
  $build['#attributes']['style'] = 'display: none;';
  $build['#attributes']['class'][] = 'antibot-hidden';
    
  // Provide a message in the event that the user does not have Javascript.
  $build['#prefix'] = '<div class="antibot-no-js antibot-message antibot-message-warning">' . t('You must have Javascript enabled to use this form.') . '</div>';

  return $build;
}
